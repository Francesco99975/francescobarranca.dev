datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @db.VarChar(12) @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  @@map("admins")
}

model Password {
  hash   String

  user   Admin  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@map("passwords")
}

model Visit {
  id       String @id
  ip       String
  date     DateTime @default(now())
  views    Int
  duration Int
  sauce    String
  agent    String

  @@map("visits")
}

model Skill {
  id               String            @id @default(cuid())
  name             String
  platform         String?
  subplatform      String?
  projects         Project[]

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("skills")
}

model Project {
  id               String            @id @default(cuid())
  title            String
  description      String
  commission       Boolean           @default(false)
  featured         Boolean           @default(false)
  skills           Skill[]
  imageUrls        Image[]
  sourceCodeUrl    String
  downloadUrl      String

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("projects")
}

model Image {
  id        String  @id @default(cuid())
  url       String
  project   Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String

  @@map("images")
}

enum Status {
  SUBMITTED
  PENDING
  ACCEPTED
  INVOICING
  COMPLETED
}

model Commission {
  id           String   @id @default(cuid())
  subject      String
  description  String
  theme        String
  pwa          Boolean
  environment  String
  status       Status   @default(SUBMITTED)
  price        Int      @default(0)
  subscription Int      @default(0)
  customer     Customer @relation(fields: [customerId], references: [email], onUpdate: Cascade, onDelete: Cascade)
  customerId   String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("commissions")
}

model Customer {
  email        String      @id
  firstname    String
  middlename   String?
  lastname     String
  address      String
  commissions  Commission[]

  @@map("customers")
}